package com.fashionstore.basicauth.controllers;

import java.util.ArrayList;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.fashionstore.basicauth.daos.Customer;
import com.fashionstore.basicauth.daos.Order;
import com.fashionstore.basicauth.daos.RazorpayTransaction;
import com.fashionstore.basicauth.daos.SubOrder;
import com.fashionstore.basicauth.models.OrderModel;
import com.fashionstore.basicauth.repositories.OrderRepository;

@RestController
public class OrderController {
	
	@Autowired
	private OrderRepository orderRepository;
	
	@PostMapping("/place-order")
	public String placeOrder(@RequestBody() OrderModel orderm) {
		prepareOrderEntity(orderm);
		return "Success";
	}
	
	private void prepareOrderEntity(OrderModel orderm) {
		
		Order order = new Order() ;
		if (order.getSuborders() == null) {
			order.setSuborders(new ArrayList<>());			
		}
		order.setStatus("CREATED");
		order.setPayment(new RazorpayTransaction());
		order.setUser(new Customer());
		
		order.getPayment().setRazorpayPaymentId(orderm.getPayment().getRazorpayPaymentId());
		order.getUser().setUserId(orderm.getUser().getUserId());
		
		ArrayList<SubOrder> subOrderList = (ArrayList<SubOrder>)orderm.getSubordermodels().stream().map(e -> {
			SubOrder temp = new SubOrder();
			temp.setPrice(e.getPrice());
			temp.setProductid(e.getProductid());
			temp.setQuantity(e.getQuantity());
			temp.setOrder(order);
			return temp;
		}).collect(Collectors.toList());
		
		order.getSuborders().addAll(subOrderList);
		
		orderRepository.save(order);
		
	}
	
	/*
	 * @Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private Long oid;
	private String status;
	@OneToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "paymentid", referencedColumnName = "razorpayPaymentId")
	@JsonManagedReference
	private RazorpayTransaction payment;	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "userid", referencedColumnName = "userid")
	@JsonManagedReference
	private Customer user;
	@CreationTimestamp
	private LocalDateTime createdat;
	@UpdateTimestamp
	private LocalDateTime modat;
	@OneToMany(fetch = FetchType.LAZY, mappedBy="order", cascade = CascadeType.ALL)
	@JsonManagedReference
	private List<SubOrder> suborders;
	 */

}
